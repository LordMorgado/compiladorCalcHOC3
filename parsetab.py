
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftSUMARESTAleftMULTDIVleftUMINUSrightPOTENCIAASIGNAR DIV FUNCTION IDENTIFICADOR MULT NUMERO PARDER PARIZQ POTENCIA RESTA SUMAdeclaracion : IDENTIFICADOR ASIGNAR expresiondeclaracion : expresion\n    expresion  :   expresion SUMA expresion\n                |   expresion RESTA expresion\n                |   expresion MULT expresion\n                |   expresion DIV expresion\n                |   expresion POTENCIA expresion\n    expresion : FUNCTION PARIZQ expresion PARDERexpresion : RESTA expresion %prec UMINUS\n    expresion  : PARIZQ expresion PARDER\n    expresion : NUMEROexpresion : IDENTIFICADOR'
    
_lr_action_items = {'IDENTIFICADOR':([0,4,6,8,9,10,11,12,13,16,],[2,15,15,15,15,15,15,15,15,15,]),'FUNCTION':([0,4,6,8,9,10,11,12,13,16,],[5,5,5,5,5,5,5,5,5,5,]),'RESTA':([0,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,],[4,-12,10,4,4,-11,4,4,4,4,4,4,-9,-12,4,10,10,-3,-4,-5,-6,-7,10,-10,-8,]),'PARIZQ':([0,4,5,6,8,9,10,11,12,13,16,],[6,6,16,6,6,6,6,6,6,6,6,]),'NUMERO':([0,4,6,8,9,10,11,12,13,16,],[7,7,7,7,7,7,7,7,7,7,]),'$end':([1,2,3,7,14,15,18,19,20,21,22,23,25,26,],[0,-12,-2,-11,-9,-12,-1,-3,-4,-5,-6,-7,-10,-8,]),'ASIGNAR':([2,],[8,]),'SUMA':([2,3,7,14,15,17,18,19,20,21,22,23,24,25,26,],[-12,9,-11,-9,-12,9,9,-3,-4,-5,-6,-7,9,-10,-8,]),'MULT':([2,3,7,14,15,17,18,19,20,21,22,23,24,25,26,],[-12,11,-11,-9,-12,11,11,11,11,-5,-6,-7,11,-10,-8,]),'DIV':([2,3,7,14,15,17,18,19,20,21,22,23,24,25,26,],[-12,12,-11,-9,-12,12,12,12,12,-5,-6,-7,12,-10,-8,]),'POTENCIA':([2,3,7,14,15,17,18,19,20,21,22,23,24,25,26,],[-12,13,-11,13,-12,13,13,13,13,13,13,13,13,-10,-8,]),'PARDER':([7,14,15,17,19,20,21,22,23,24,25,26,],[-11,-9,-12,25,-3,-4,-5,-6,-7,26,-10,-8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'declaracion':([0,],[1,]),'expresion':([0,4,6,8,9,10,11,12,13,16,],[3,14,17,18,19,20,21,22,23,24,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> declaracion","S'",1,None,None,None),
  ('declaracion -> IDENTIFICADOR ASIGNAR expresion','declaracion',3,'p_declaracion_asignar','an_sintactico.py',25),
  ('declaracion -> expresion','declaracion',1,'p_declaracion_expr','an_sintactico.py',30),
  ('expresion -> expresion SUMA expresion','expresion',3,'p_expresion_operaciones','an_sintactico.py',35),
  ('expresion -> expresion RESTA expresion','expresion',3,'p_expresion_operaciones','an_sintactico.py',36),
  ('expresion -> expresion MULT expresion','expresion',3,'p_expresion_operaciones','an_sintactico.py',37),
  ('expresion -> expresion DIV expresion','expresion',3,'p_expresion_operaciones','an_sintactico.py',38),
  ('expresion -> expresion POTENCIA expresion','expresion',3,'p_expresion_operaciones','an_sintactico.py',39),
  ('expresion -> FUNCTION PARIZQ expresion PARDER','expresion',4,'p_expresion_funcion','an_sintactico.py',53),
  ('expresion -> RESTA expresion','expresion',2,'p_expresion_uminus','an_sintactico.py',73),
  ('expresion -> PARIZQ expresion PARDER','expresion',3,'p_expresion_grupo','an_sintactico.py',78),
  ('expresion -> NUMERO','expresion',1,'p_expresion_numero','an_sintactico.py',83),
  ('expresion -> IDENTIFICADOR','expresion',1,'p_expresion_nombre','an_sintactico.py',87),
]
